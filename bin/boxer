#!/usr/bin/env python3

import argparse
import sys

from subpop.hub import Hub

from boxer.config.base import BoxerConfig


class DoItHub(Hub):
	@property
	def pkgtools(self):
		return globals()["pkgtools"]


hub = Hub()

import dyne.org.funtoo.boxer.containers as containers

CLI_CONFIG = {
	"target": {"default": None, "action": "store", "help": "Set the target container image type.", "choices":["docker", "sif"], "required": True},
	"stage": {"default": [], "action": "store", "positional": True, "help": "stage3 tarball to use as source"},
	"debug": {"default": False, "action": "store_true"},
	"push": {"default": False, "action": "store_true"},
	"tag": {"default": None, "action": "store", "help": "Set a tag/name for the resultant container"},
}


def parse_args():
	ap = argparse.ArgumentParser()
	for arg, kwargs in CLI_CONFIG.items():
		if "positional" in kwargs and kwargs["positional"]:
			new_kwargs = kwargs.copy()
			del new_kwargs["positional"]
			ap.add_argument(arg, **new_kwargs)
		else:
			if "os" in kwargs:
				del kwargs["os"]
			ap.add_argument("--" + arg, **kwargs)
	return ap.parse_args()


async def main_thread():
	hub.OPT = parse_args()
	kwargs = {}
	for arg in set(CLI_CONFIG.keys()):
		kwargs[arg] = getattr(hub.OPT, arg)
	await containers.launch(BoxerConfig, **kwargs)
	containers.model.log.debug("Starting.")
	result = await containers.generate.start()
	return result

if __name__ == "__main__":
	success = hub.LOOP.run_until_complete(main_thread())
	hub.LOOP.close()
	if not success:
		sys.exit(1)

# vim: ts=4 sw=4 noet
